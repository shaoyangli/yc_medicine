package com.kh.util;

import org.xvolks.jnative.JNative;
import org.xvolks.jnative.Type;
import org.xvolks.jnative.exceptions.NativeException;
import org.xvolks.jnative.misc.basicStructures.UINT;
import org.xvolks.jnative.pointers.Pointer;
import org.xvolks.jnative.pointers.memory.MemoryBlockFactory;

/**
 * 
 * 功能描述：java调用dll动态库<br>
 * 
 **/
public class EcardReaderImpl {

	/**
	 * 连接
	 * 
	 * @return
	 * @throws NativeException
	 * @throws IllegalAccessException
	 */
	public String Init(int contrast_level, int angle) throws NativeException,
			IllegalAccessException {
		JNative n = null;
		try {
			// 1.创建JNative对象
			n = new JNative("E:\\7V2x_contrast.dll", "TA_Algo_MatchInit_aibo");
			Pointer p1 = new Pointer(
					MemoryBlockFactory.createMemoryBlock(100 * 100));
			Pointer p2 = new Pointer(
					MemoryBlockFactory.createMemoryBlock(100 * 100));
			p1.setIntAt(0, contrast_level);
			p2.setIntAt(0, angle);
			n.setParameter(0, p1);
			n.setParameter(1, p2);
			// 2.设置函数返回值类型
			n.setRetVal(Type.INT);
			n.invoke();
			return n.getRetVal();
		} finally {
			if (n != null) {
				n.dispose();
			}
		}
	}

	/**
	 * 比对
	 * 
	 * @return
	 * @throws NativeException
	 * @throws IllegalAccessException
	 */
	public String ComparisonCard() throws NativeException,
			IllegalAccessException {
		JNative n = null;
		try {
			// 1.创建JNative对象
			n = new JNative("E:\\7V2x_contrast.dll", "TA_Algo_Match_aibo");
			// 2.设置函数返回值类型
			n.setRetVal(Type.INT);
			// 3.设置参数类型

			// 声明指定内存空间
			Pointer p1 = new Pointer(
					MemoryBlockFactory.createMemoryBlock(100 * 100));
			Pointer p2 = new Pointer(
					MemoryBlockFactory.createMemoryBlock(100 * 100));
			int i = 0;
			// aa.setStringAt(0,
			
			// bb.setStringAt(1,
			// "D002000000000000000000000000000000000E000B2B0513122B0926970202209F060C2FD114A10D0934A42F07C5A70809B12D2707C7954DB22F08D2B608069EB81D11F04B3306EE44484C100310D225077C0408141584881415D58C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500BB001605FF141515131110FFFFFF1616171716141213FFFF1918191818161717FFFF1A1A191A1B1C1C1CFFFF19191A1C1F242525FFFF1B1B1C20262B2E2FFFFF1E1F20242C313536FFFF2626272B32363A3BFFFF2F303133373C3F42FFFF2F31363B3E424548FFFF2B2D364648484B4DFFFF27262C54514F5051FFFF242014675D575555FFFF1F190E78675F5B59FFFF18150D0072676160FFFF14120D04776D6866FFFF14120D047A706B69FFFF15120E067D746D6BFFFF15130F080178716EFFFF15130E09037D7672FFFF14120F09037C7875FFFFFF120E09027C77FFFFFF1617171617161616151515141312121212121112121111121212131312111112111211120199AE1500000000000019A6171811C100000000000000000000000000002175000000000000000000000000000000000000");
		String s
		String s
			p1.setMemory(s1);
			p2.setMemory(s2);
			n.setParameter(i++, s1);
			n.setParameter(i++, s2);
			// 4.执行函数
			n.invoke();
			// 5.获取函数返回值
			return n.getRetVal();
		} finally {
			if (n != null) {
				n.dispose();
			}
		}
	}
   

	/**
	 * 比对
	 * 
	 * @return
	 * @throws NativeException
	 * @throws IllegalAccessException
	 */
	public String ComparisonCard2() throws NativeException,
			IllegalAccessException {
		JNative n = null;
		try {
			// 1.创建JNative对象
			n = new JNative("E:\\FingerPnt.dll", "MatchTwoFingerPnt");
			// 2.设置函数返回值类型
			n.setRetVal(Type.INT);
			// 声明指定内存空间
			Pointer p1 = new Pointer(
					MemoryBlockFactory.createMemoryBlock(100 * 100));
			Pointer p2 = new Pointer(
					MemoryBlockFactory.createMemoryBlock(100 * 100));
			// 3.设置参数类型
			int i = 0;
		String s
		String s
			p1.setMemory(s1);
			p2.setMemory(s2);
			n.setParameter(i++, p1);
			n.setParameter(i++, p2);
			// 4.执行函数
			n.invoke();
			// 5.获取函数返回值
			return n.getRetVal();
		} finally {
			if (n != null) {
				n.dispose();
			}
		}
	}


	public static void main(String[] args) throws NativeException,
			IllegalAccessException {
		EcardReaderImpl impl = new EcardReaderImpl();
		System.out.println("连接==" + impl.Init(1, 90));
		System.out.println("比对==" + impl.ComparisonCard());
		System.out.println("比对2==" + impl.ComparisonCard2());
	}

}